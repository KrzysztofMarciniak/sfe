digraph cflow {
    node [shape="box"]
    main [label="int main (void)
/home/runner/work/sfe/sfe/backend/register.c:50"]
    main -> getenv
    main -> response_init
    main -> strcmp
    main -> response_append_str
    main -> free_memory
    main -> response_send
    main -> read_post_data
    main -> json_tokener_parse
    main -> json_object_object_get_ex
    main -> json_object_get_string
    main -> csrf_validate_token
    main -> strlen
    main -> validate_username
    main -> sanitizec_apply
    main -> hash_password
    main -> sqlite3_open
    main -> user_insert
    main -> strstr
    getenv [label="getenv()"]
    response_init [label="void response_init (response_t *resp, unsigned int http_code)
/home/runner/work/sfe/sfe/backend/lib/response/response.c:16"]
    response_init -> json_object_put
    response_init -> json_object_new_object
    response_init -> json_object_object_add
    response_init -> json_object_new_int
    response_init -> json_object_new_array
    json_object_put [label="json_object_put()"]
    json_object_new_object [label="json_object_new_object()"]
    json_object_object_add [label="json_object_object_add()"]
    json_object_new_int [label="json_object_new_int()"]
    json_object_new_array [label="json_object_new_array()"]
    strcmp [label="strcmp()"]
    response_append_str [label="void response_append_str (response_t *resp, const char *msg)
/home/runner/work/sfe/sfe/backend/lib/response/response.c:49"]
    response_append_str -> json_object_new_array
    response_append_str -> json_object_object_add
    response_append_str -> json_object_new_string
    response_append_str -> json_object_array_add
    response_append_str -> json_object_put
    json_object_new_string [label="json_object_new_string()"]
    json_object_array_add [label="json_object_array_add()"]
    free_memory [label="void free_memory (sqlite3 *db, char *body, struct json_object *jobj, char *username_sanitized, char *password_hash, user_t *inserted_user, result_t *res, result_t *csrf_res, result_t *hash_res, result_t *user_res)
/home/runner/work/sfe/sfe/backend/register.c:26"]
    free_memory -> sqlite3_close
    free_memory -> free
    free_memory -> json_object_put
    free_memory -> user_free
    free_memory -> result_free
    sqlite3_close [label="sqlite3_close()"]
    free [label="free()"]
    user_free [label="void user_free (user_t *user)
/home/runner/work/sfe/sfe/backend/lib/models/user_model/user_model.c:137"]
    user_free -> free
    result_free [label="void result_free (result_t *res)
/home/runner/work/sfe/sfe/backend/lib/result/result.c:57"]
    result_free -> free
    response_send [label="void response_send (response_t *resp)
/home/runner/work/sfe/sfe/backend/lib/response/response.c:107"]
    response_send -> json_object_new_object
    response_send -> json_object_object_add
    response_send -> json_object_new_int
    response_send -> json_object_new_array
    response_send -> json_object_to_json_string_ext
    response_send -> printf
    json_object_to_json_string_ext [label="json_object_to_json_string_ext()"]
    printf [label="printf()"]
    read_post_data [label="result_t *read_post_data (char **out_body)
/home/runner/work/sfe/sfe/backend/lib/read_post_data/read_post_data.c:13"]
    read_post_data -> getenv
    read_post_data -> result_failure
    read_post_data -> result_add_extra
    read_post_data -> strtol
    read_post_data -> malloc
    read_post_data -> result_critical_failure
    read_post_data -> fread
    read_post_data -> free
    read_post_data -> result_success
    result_failure [label="result_failure()"]
    result_add_extra [label="void result_add_extra (result_t *res, const char *format, ...)
/home/runner/work/sfe/sfe/backend/lib/result/result.c:71"]
    result_add_extra -> va_start
    result_add_extra -> va_copy
    result_add_extra -> vsnprintf
    result_add_extra -> va_end
    result_add_extra -> malloc
    result_add_extra -> free
    va_start [label="va_start()"]
    va_copy [label="va_copy()"]
    vsnprintf [label="vsnprintf()"]
    va_end [label="va_end()"]
    malloc [label="malloc()"]
    strtol [label="strtol()"]
    result_critical_failure [label="result_critical_failure()"]
    fread [label="fread()"]
    result_success [label="result_success()"]
    json_tokener_parse [label="json_tokener_parse()"]
    json_object_object_get_ex [label="json_object_object_get_ex()"]
    json_object_get_string [label="json_object_get_string()"]
    csrf_validate_token [label="result_t *csrf_validate_token (const char *token)
/home/runner/work/sfe/sfe/backend/lib/csrf/csrf.c:154"]
    csrf_validate_token -> result_failure
    csrf_validate_token -> sanitizec_apply
    csrf_validate_token -> result_critical_failure
    csrf_validate_token -> strlen
    csrf_validate_token -> result_add_extra
    csrf_validate_token -> free
    csrf_validate_token -> from_hex
    csrf_validate_token -> time
    csrf_validate_token -> get_csrf_secret
    csrf_validate_token -> result_free
    csrf_validate_token -> memcpy
    csrf_validate_token -> HMAC
    csrf_validate_token -> EVP_sha256
    csrf_validate_token -> memcmp
    csrf_validate_token -> result_success
    sanitizec_apply [label="sanitizec_apply()"]
    strlen [label="strlen()"]
    from_hex [label="bool from_hex (const char *src, unsigned char *dest, size_t len)
/home/runner/work/sfe/sfe/backend/lib/csrf/csrf.c:48"]
    from_hex -> sscanf
    sscanf [label="sscanf()"]
    time [label="time()"]
    get_csrf_secret [label="result_t *get_csrf_secret (char **out_secret)
/home/runner/work/sfe/sfe/backend/lib/secrets/secrets.c:97"]
    get_csrf_secret -> result_failure
    get_csrf_secret -> read_secret_file
    get_csrf_secret -> result_success
    read_secret_file [label="result_t *read_secret_file (const char *path, char **out_secret)
/home/runner/work/sfe/sfe/backend/lib/secrets/secrets.c:23"]
    read_secret_file -> result_failure
    read_secret_file -> result_add_extra
    read_secret_file -> fopen
    read_secret_file -> fseek
    read_secret_file -> fclose
    read_secret_file -> ftell
    read_secret_file -> rewind
    read_secret_file -> malloc
    read_secret_file -> result_critical_failure
    read_secret_file -> fread
    read_secret_file -> free
    read_secret_file -> result_success
    fopen [label="fopen()"]
    fseek [label="fseek()"]
    fclose [label="fclose()"]
    ftell [label="ftell()"]
    rewind [label="rewind()"]
    memcpy [label="memcpy()"]
    HMAC [label="HMAC()"]
    EVP_sha256 [label="EVP_sha256()"]
    memcmp [label="int memcmp (const void *a, const void *b, size_t len)
/home/runner/work/sfe/sfe/backend/lib/memcmp/memcmp.c:3"]
    validate_username [label="const char *validate_username (const char *str)
/home/runner/work/sfe/sfe/backend/register.c:43"]
    validate_username -> strlen
    hash_password [label="result_t *hash_password (const char *password, char **out_hash)
/home/runner/work/sfe/sfe/backend/lib/hash_password/hash_password.c:23"]
    hash_password -> result_failure
    hash_password -> sodium_init
    hash_password -> result_critical_failure
    hash_password -> malloc
    hash_password -> crypto_pwhash_str
    hash_password -> strlen
    hash_password -> free
    hash_password -> result_add_extra
    hash_password -> result_success
    sodium_init [label="sodium_init()"]
    crypto_pwhash_str [label="crypto_pwhash_str()"]
    sqlite3_open [label="sqlite3_open()"]
    user_insert [label="result_t *user_insert (sqlite3 *db, const user_t *user, user_t **out_user)
/home/runner/work/sfe/sfe/backend/lib/dal/user/user.c:16"]
    user_insert -> result_failure
    user_insert -> result_add_extra
    user_insert -> sqlite3_prepare_v2
    user_insert -> result_critical_failure
    user_insert -> sqlite3_errmsg
    user_insert -> sqlite3_bind_text
    user_insert -> sqlite3_step
    user_insert -> sqlite3_finalize
    user_insert -> malloc
    user_insert -> sqlite3_last_insert_rowid
    user_insert -> strdup
    user_insert -> user_free
    user_insert -> result_success
    sqlite3_prepare_v2 [label="sqlite3_prepare_v2()"]
    sqlite3_errmsg [label="sqlite3_errmsg()"]
    sqlite3_bind_text [label="sqlite3_bind_text()"]
    sqlite3_step [label="sqlite3_step()"]
    sqlite3_finalize [label="sqlite3_finalize()"]
    sqlite3_last_insert_rowid [label="sqlite3_last_insert_rowid()"]
    strdup [label="strdup()"]
    strstr [label="strstr()"]
}
