/**
 * @file hash_password.h
 * @brief Password hashing and verification using PBKDF2-HMAC-SHA256.
 *
 * This module provides functions to securely hash passwords and verify them.
 * It uses OpenSSL's libcrypto for PBKDF2 with SHA-256.
 */

#ifndef HASH_PASSWORD_H
#define HASH_PASSWORD_H

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief Generate a password hash using PBKDF2-HMAC-SHA256.
 *
 * The resulting string is formatted as: salt$iterations$hash
 * where:
 * - salt: hex-encoded salt
 * - iterations: number of iterations used in PBKDF2
 * - hash: hex-encoded derived key
 *
 * @param password The input password string.
 * @param err Optional pointer to receive an error message (NULL on success).
 * @return A newly allocated string containing the password hash.
 *         Must be freed by the caller. Returns NULL on failure.
 */
char* hash_password(const char* password, const char** err);

/**
 * @brief Verify a password against a stored PBKDF2-HMAC-SHA256 hash.
 *
 * Parses the stored hash, re-derives the key from the input password,
 * and compares it securely.
 *
 * @param password The password to verify.
 * @param stored_hash The hash string previously generated by hash_password().
 * @param err Optional pointer to receive an error message (NULL on success).
 * @return 1 if the password matches, 0 if it does not, -1 on error.
 */
int verify_password(const char* password, const char* stored_hash,
                    const char** err);

#ifdef __cplusplus
}
#endif

#endif// HASH_PASSWORD_H
