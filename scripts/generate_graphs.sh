#!/bin/bash
set -eu
# generate_graphs.sh
# - Generates .dot and .svg callgraphs using cflow -f dot + dot
# - Outputs into docs/graphs and a simple docs/index.html
# Pure bash (no `find`), safe for filenames with spaces.

ROOT="$(cd "$(dirname "$0")/.." && pwd)"
OUTDIR="$ROOT/docs/graphs"
mkdir -p "$OUTDIR"

# Use bash globbing (nullglob) so patterns with no match expand to empty list
shopt -s nullglob

# Collect backend and lib sources without `find`
BACKEND_C=("$ROOT"/backend/*.c)
LIB_C=("$ROOT"/backend/lib/*.c)

# If the directory doesn't exist, make arrays empty
[ -d "$ROOT/backend" ] || BACKEND_C=()
[ -d "$ROOT/backend/lib" ] || LIB_C=()

# Helper to produce dot filename for a source
tmpdot() { printf '%s\n' "$OUTDIR/$(basename "$1" .c).dot"; }

echo "Output directory: $OUTDIR"
echo "Backend files: ${#BACKEND_C[@]}"
echo "Lib files: ${#LIB_C[@]}"

# Generate per-backend graph. If file contains main(), use --main=main.
for src in "${BACKEND_C[@]}"; do
    [ -f "$src" ] || continue
    bn=$(basename "$src" .c)
    DOT="$(tmpdot "$src")"

    if grep -q -E 'int[[:space:]]+main[[:space:]]*\(' "$src" 2>/dev/null; then
        echo "Generating callgraph for $bn (entry: main)"
        if [ "${#LIB_C[@]}" -gt 0 ]; then
            cflow -f dot --main=main "${LIB_C[@]}" "$src" >"$DOT"
        else
            cflow -f dot --main=main "$src" >"$DOT"
        fi
    else
        echo "Generating module callgraph for $bn"
        if [ "${#LIB_C[@]}" -gt 0 ]; then
            cflow -f dot "${LIB_C[@]}" "$src" >"$DOT"
        else
            cflow -f dot "$src" >"$DOT"
        fi
    fi

    # Convert to svg
    dot -Tsvg "$DOT" -o "$OUTDIR/$bn.svg"
done

# Generate a monolithic lib graph (all library sources)
if [ "${#LIB_C[@]}" -gt 0 ]; then
    echo "Generating combined library callgraph"
    LIBDOT="$OUTDIR/lib_all.dot"
    cflow -f dot "${LIB_C[@]}" >"$LIBDOT"
    dot -Tsvg "$LIBDOT" -o "$OUTDIR/lib_all.svg"
fi

# Build a minimal index.html
IDX="$ROOT/docs/index.html"
cat > "$IDX" <<'HTML'
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>Call Graphs</title>
  <style>
    body { font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial; padding: 24px; }
    .grid { display:grid; grid-template-columns: repeat(auto-fit,minmax(320px,1fr)); gap: 18px; }
    .card { border:1px solid #e1e1e1; padding:12px; border-radius:8px; background:#fff; }
    .card h3{ margin:0 0 8px 0; font-size:15px; }
    .svgWrap{ height:420px; overflow:auto; border:1px dashed #ddd; padding:6px; background:#fafafa; }
    a.meta{ font-size:13px; color:#333; text-decoration:none; }
  </style>
</head>
<body>
  <h1>Call Graphs (auto-generated)</h1>
  <p>Generated by <code>scripts/generate_graphs.sh</code>. Rendered with Graphviz.</p>
  <div class="grid">
HTML

# Insert each svg as a card (safe iteration)
for svg in "$OUTDIR"/*.svg; do
    [ -f "$svg" ] || continue
    name=$(basename "$svg")
    title=$(basename "$svg" .svg)
    cat >> "$IDX" <<HTML
    <div class="card">
      <h3>$title</h3>
      <div class="svgWrap">
        <object type="image/svg+xml" data="graphs/$name" width="100%"></object>
      </div>
      <p><a class="meta" href="graphs/$name" target="_blank">Open SVG</a></p>
    </div>
HTML
done

cat >> "$IDX" <<'HTML'
  </div>
</body>
</html>
HTML

echo "Graphs written to $OUTDIR and index at docs/index.html"
