#!/bin/bash
# generate_graphs.sh
# - Generates .dot and .svg callgraphs using cflow + dot
# - Outputs into docs/graphs and a simple docs/index.html

set -e  # Exit immediately if a command exits with a non-zero status
set -u  # Treat unset variables as an error
set -o pipefail  # Fail on any part of a pipe failing

# Ensure script is run from the correct directory
ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
OUTDIR="$ROOT/docs/graphs"

# Create output directory if it doesn't exist
mkdir -p "$OUTDIR"

# Debug: Print out directory paths and check for source files
echo "Root directory: $ROOT"
echo "Output directory: $OUTDIR"

# Collect source files with more verbose error checking
BACKEND_C=$(find "$ROOT/backend" -maxdepth 1 -name '*.c' 2>/dev/null)
LIB_C=$(find "$ROOT/backend/lib" -name '*.c' 2>/dev/null)

echo "Backend C files found:"
echo "$BACKEND_C"
echo "Lib C files found:"
echo "$LIB_C"

# Check if any source files were found
if [ -z "$BACKEND_C" ] && [ -z "$LIB_C" ]; then
    echo "ERROR: No C source files found in backend or backend/lib directories"
    exit 1
fi

# Temporary dot file function
tmpdot() {
    echo "$OUTDIR/$(basename "$1" .c).dot"
}

# Ensure tools are available
command -v cflow >/dev/null 2>&1 || { echo >&2 "cflow is not installed. Aborting."; exit 1; }
command -v dot >/dev/null 2>&1 || { echo >&2 "graphviz (dot) is not installed. Aborting."; exit 1; }

# Generate per-backend graph
for src in $BACKEND_C; do
    bn=$(basename "$src" .c)
    DOT=$(tmpdot "$src")

    echo "Processing source file: $src"

    # Try different cflow options
    if grep -q 'int[[:space:]]\+main[[:space:]]*(' "$src" 2>/dev/null; then
        echo "Generating callgraph for $bn (entry: main)"
        cflow -b -T -f dot --main=main $LIB_C "$src" > "$DOT" 2>/dev/null || \
        cflow -b -T -f dot "$src" > "$DOT"
    else
        echo "Generating module callgraph for $bn"
        cflow -b -T --format=dot $LIB_C "$src" > "$DOT" 2>/dev/null || \
        cflow -b -T --format=dot "$src" > "$DOT"
    fi

    # Convert to svg, with error handling
    if [ -s "$DOT" ]; then
        dot -Tsvg "$DOT" -o "$OUTDIR/$bn.svg" || echo "Failed to convert $bn to SVG"
    else
        echo "Failed to generate DOT file for $bn"
    fi
done

# Generate a monolithic lib graph (all library sources)
if [ -n "$LIB_C" ]; then
    DOT_LIB="$OUTDIR/lib_all.dot"
    cflow -b -T --format=dot $LIB_C > "$DOT_LIB" 2>/dev/null || \
    echo "Failed to generate library call graph"

    if [ -s "$DOT_LIB" ]; then
        dot -Tsvg "$DOT_LIB" -o "$OUTDIR/lib_all.svg" || \
        echo "Failed to convert library graph to SVG"
    fi
fi

# Build a minimal index.html (same as your original script)
IDX="$ROOT/docs/index.html"
cat > "$IDX" <<'HTML'
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>Call Graphs</title>
  <style>
    body { font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial; padding: 24px; }
    .grid { display:grid; grid-template-columns: repeat(auto-fit,minmax(320px,1fr)); gap: 18px; }
    .card { border:1px solid #e1e1e1; padding:12px; border-radius:8px; background:#fff; }
    .card h3{ margin:0 0 8px 0; font-size:15px; }
    .svgWrap{ height:420px; overflow:auto; border:1px dashed #ddd; padding:6px; background:#fafafa; }
    a.meta{ font-size:13px; color:#333; text-decoration:none; }
  </style>
</head>
<body>
  <h1>Call Graphs (auto-generated)</h1>
  <p>Generated by <code>scripts/generate_graphs.sh</code>. Rendered with Graphviz.</p>
  <div class="grid">
HTML

# Insert each svg as a card
for svg in $(ls "$OUTDIR"/*.svg 2>/dev/null || true); do
    name=$(basename "$svg")
    title=$(basename "$svg" .svg)
    cat >> "$IDX" <<HTML
    <div class="card">
      <h3>$title</h3>
      <div class="svgWrap">
        <object type="image/svg+xml" data="graphs/$name" width="100%"></object>
      </div>
      <p><a class="meta" href="graphs/$name" target="_blank">Open SVG</a></p>
    </div>
HTML
done

cat >> "$IDX" <<'HTML'
  </div>
</body>
</html>
HTML

# Final diagnostics
echo "Graphs generation complete"
echo "Generated files in $OUTDIR:"
ls -l "$OUTDIR"
echo "Index file: $IDX"
