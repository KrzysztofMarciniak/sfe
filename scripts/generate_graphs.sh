#!/bin/bash
# generate_graphs.sh
# Generates .dot and .svg callgraphs, outputs into docs/graphs and docs/index.html
set -euo pipefail

ROOT="$PWD"
OUTDIR="$ROOT/docs/graphs"

# Ensure output dir exists
if [ ! -d "$OUTDIR" ]; then
    mkdir -p "$OUTDIR" 2>/dev/null || { echo "Failed to create output directory $OUTDIR"; exit 1; }
fi

echo "Root directory: $ROOT"
echo "Output directory: $OUTDIR"

# Enable recursive globbing and make non-matches expand to zero words
shopt -s globstar nullglob

# Collect source files using recursive globbing
BACKEND_C=()
LIB_C=()

for f in "$ROOT"/backend/*.c; do
    [ -f "$f" ] && BACKEND_C+=("$f")
done

# recursive: matches backend/lib/**/**/*.c etc.
for f in "$ROOT"/backend/lib/**/*.c; do
    [ -f "$f" ] && LIB_C+=("$f")
done

echo "Backend C files found: ${#BACKEND_C[@]}"
echo "Lib C files found: ${#LIB_C[@]}"

if [ ${#BACKEND_C[@]} -eq 0 ] && [ ${#LIB_C[@]} -eq 0 ]; then
    echo "ERROR: No C source files found in backend or backend/lib"
    exit 1
fi

# Generate per-backend graph
for src in "${BACKEND_C[@]}"; do
    bn="${src##*/}"
    bn="${bn%.c}"
    DOT="$OUTDIR/$bn.dot"

    echo "Processing source file: $src"

    # Build cflow args only if lib files exist
    CFLOW_ARGS=()
    [ ${#LIB_C[@]} -gt 0 ] && CFLOW_ARGS+=("${LIB_C[@]}")

    if grep -q 'int[[:space:]]\+main[[:space:]]*(' "$src" 2>/dev/null; then
        cflow -b -T -f dot --main=main "${CFLOW_ARGS[@]}" "$src" > "$DOT" 2>/dev/null || \
        cflow -b -T -f dot "$src" > "$DOT"
    else
        cflow -b -T --format=dot "${CFLOW_ARGS[@]}" "$src" > "$DOT" 2>/dev/null || \
        cflow -b -T --format=dot "$src" > "$DOT"
    fi

    if [ -s "$DOT" ]; then
        dot -Tsvg "$DOT" -o "$OUTDIR/$bn.svg" || echo "Failed to convert $bn to SVG"
    else
        echo "Failed to generate DOT file for $bn"
    fi
done

# Monolithic library graph (only if libs exist)
if [ ${#LIB_C[@]} -gt 0 ]; then
    DOT_LIB="$OUTDIR/lib_all.dot"
    cflow -b -T --format=dot "${LIB_C[@]}" > "$DOT_LIB" 2>/dev/null || echo "Failed to generate library call graph"
    [ -s "$DOT_LIB" ] && dot -Tsvg "$DOT_LIB" -o "$OUTDIR/lib_all.svg" || echo "Failed to convert library graph to SVG"
fi

# Build index.html
IDX="$ROOT/docs/index.html"
cat > "$IDX" <<'HTML'
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Call Graphs</title>
<style>
/* Dark theme base */
body {
    font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
    padding: 24px;
    background-color: #121212;
    color: #e0e0e0;
    line-height: 1.5;
}
h1 {
    margin-bottom: 16px;
    color: #ffffff;
}
p {
    margin-bottom: 24px;
    color: #b0b0b0;
}
.graph-container {
    margin-bottom: 32px;
    border: 1px solid #333;
    border-radius: 8px;
    background-color: #1e1e1e;
    padding: 16px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.5);
}
.graph-container h2 {
    margin-top: 0;
    font-size: 16px;
    color: #f0f0f0;
}
.svg-wrap {
    overflow-x: auto;       /* horizontal scroll if SVG too wide */
    overflow-y: hidden;
    border: 1px dashed #555;
    padding: 8px;
    background-color: #2b2b2b;
}
.svg-wrap object {
    max-width: 100%;        /* scale down to container width */
    height: 420px;
}
a.meta {
    display: inline-block;
    margin-top: 8px;
    font-size: 13px;
    color: #4ea1ff;
    text-decoration: none;
}
a.meta:hover { text-decoration: underline; }
code {
    background-color: #2b2b2b;
    padding: 2px 4px;
    border-radius: 4px;
    color: #4ea1ff;
}
</style>
</head>
<body>
<h1>Call Graphs (auto-generated)</h1>
<p>Generated by <code>scripts/generate_graphs.sh</code>. Rendered with Graphviz.</p>
HTML

for svg in "$OUTDIR"/*.svg; do
    [ -f "$svg" ] || continue
    name="${svg##*/}"
    title="${name%.svg}"
    cat >> "$IDX" <<HTML
<div class="graph-container">
  <h2>$title</h2>
  <div class="svg-wrap">
    <object type="image/svg+xml" data="graphs/$name"></object>
  </div>
  <a class="meta" href="graphs/$name" target="_blank">Open SVG</a>
</div>
HTML
done

cat >> "$IDX" <<'HTML'
</body>
</html>
HTML

echo "Graphs generation complete"
echo "Generated files in $OUTDIR:"
ls -l "$OUTDIR"
echo "Index file: $IDX"
