#!/bin/bash
# generate_graphs.sh
# Generates .dot and .svg callgraphs, outputs into docs/graphs and docs/index.html
set -euo pipefail

ROOT="$PWD"
OUTDIR="$ROOT/docs/graphs"

# Ensure output dir exists
if [ ! -d "$OUTDIR" ]; then
    mkdir -p "$OUTDIR" 2>/dev/null || { echo "Failed to create output directory $OUTDIR"; exit 1; }
fi

echo "Root directory: $ROOT"
echo "Output directory: $OUTDIR"

# Enable recursive globbing and make non-matches expand to zero words
shopt -s globstar nullglob

# Collect source files using recursive globbing
BACKEND_C=()
LIB_C=()

for f in "$ROOT"/backend/*.c; do
    [ -f "$f" ] && BACKEND_C+=("$f")
done

# recursive: matches backend/lib/**/**/*.c etc.
for f in "$ROOT"/backend/lib/**/*.c; do
    [ -f "$f" ] && LIB_C+=("$f")
done

echo "Backend C files found: ${#BACKEND_C[@]}"
echo "Lib C files found: ${#LIB_C[@]}"

if [ ${#BACKEND_C[@]} -eq 0 ] && [ ${#LIB_C[@]} -eq 0 ]; then
    echo "ERROR: No C source files found in backend or backend/lib"
    exit 1
fi

# Generate per-backend graph
for src in "${BACKEND_C[@]}"; do
    bn="${src##*/}"
    bn="${bn%.c}"
    DOT="$OUTDIR/$bn.dot"

    echo "Processing source file: $src"

    # Build cflow args only if lib files exist
    CFLOW_ARGS=()
    [ ${#LIB_C[@]} -gt 0 ] && CFLOW_ARGS+=("${LIB_C[@]}")

    if grep -q 'int[[:space:]]\+main[[:space:]]*(' "$src" 2>/dev/null; then
        cflow -b -T -f dot --main=main "${CFLOW_ARGS[@]}" "$src" > "$DOT" 2>/dev/null || \
        cflow -b -T -f dot "$src" > "$DOT"
    else
        cflow -b -T --format=dot "${CFLOW_ARGS[@]}" "$src" > "$DOT" 2>/dev/null || \
        cflow -b -T --format=dot "$src" > "$DOT"
    fi

    if [ -s "$DOT" ]; then
        dot -Tsvg "$DOT" -o "$OUTDIR/$bn.svg" || echo "Failed to convert $bn to SVG"
    else
        echo "Failed to generate DOT file for $bn"
    fi
done

# Monolithic library graph (only if libs exist)
if [ ${#LIB_C[@]} -gt 0 ]; then
    DOT_LIB="$OUTDIR/lib_all.dot"
    cflow -b -T --format=dot "${LIB_C[@]}" > "$DOT_LIB" 2>/dev/null || echo "Failed to generate library call graph"
    [ -s "$DOT_LIB" ] && dot -Tsvg "$DOT_LIB" -o "$OUTDIR/lib_all.svg" || echo "Failed to convert library graph to SVG"
fi

# Build index.html
IDX="$ROOT/docs/index.html"
cat > "$IDX" <<'HTML'
<!doctype html>
<html><head><meta charset="utf-8"><title>Call Graphs</title>
<style>body{font-family:system-ui;padding:24px}.grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(320px,1fr));gap:18px}.card{border:1px solid #e1e1e1;padding:12px;border-radius:8px;background:#fff}.card h3{margin:0 0 8px 0;font-size:15px}.svgWrap{height:420px;overflow:auto;border:1px dashed #ddd;padding:6px;background:#fafafa}a.meta{font-size:13px;color:#333;text-decoration:none}</style>
</head><body>
<h1>Call Graphs (auto-generated)</h1>
<p>Generated by <code>scripts/generate_graphs.sh</code>. Rendered with Graphviz.</p>
<div class="grid">
HTML

for svg in "$OUTDIR"/*.svg; do
    [ -f "$svg" ] || continue
    name="${svg##*/}"
    title="${name%.svg}"
    cat >> "$IDX" <<HTML
<div class="card">
  <h3>$title</h3>
  <div class="svgWrap"><object type="image/svg+xml" data="graphs/$name" width="100%"></object></div>
  <p><a class="meta" href="graphs/$name" target="_blank">Open SVG</a></p>
</div>
HTML
done

cat >> "$IDX" <<'HTML'
</div></body></html>
HTML

echo "Graphs generation complete"
echo "Generated files in $OUTDIR:"
ls -l "$OUTDIR"
echo "Index file: $IDX"
